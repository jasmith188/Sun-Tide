{"version":3,"sources":["components/Weather/index.js","components/DayCards/index.js","components/Form/index.js","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","country","temperature","Math","round","feelsLike","humidity","description","icon","error","moment","require","DayCards","newDate","Date","weekday","this","day","dt","setTime","imgURL","weather","id","format","main","temp","feels_like","React","Component","Form","onSubmit","getWeather","type","name","placeholder","API_KEY","App","state","undefined","dailyData","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","list","filter","reading","dt_txt","includes","console","log","setState","fullData","formatDayCards","map","index","key","Card","classname","CardDeck","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.14c50132.chunk.js","sourcesContent":["import React from \"react\"\r\nimport \"../../App.css\"\r\n\r\nconst Weather = (props) => (\r\n<div>\r\n                <div className=\"current-weather\">\r\n                    <h2>{props.city && props.country && <p>Location: {props.city}, {props.country}</p>}</h2>\r\n                    <div className=\"current-card\">\r\n\r\n\r\n                        {props.temperature && <p>Current Temperature: {Math.round(props.temperature)}째F</p>}\r\n                        {props.feelsLike && <p>Feels Like: {Math.round(props.feelsLike)}째F</p>}\r\n                        {props.humidity && <p>Current Humidity: {props.humidity}%</p>}\r\n                        {props.description && <p>Current Description: {props.description}</p>}\r\n                        {props.icon && <p>icon here:{props.icon}</p>}\r\n                        {props.error && <p>{this.props.error} </p>}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n);\r\n\r\n            \r\n        \r\n    \r\n\r\n\r\nexport default Weather;","import React from 'react';\r\nvar moment = require('moment');\r\n\r\nclass DayCards extends React.Component {\r\n  render() {\r\n    let newDate = new Date();\r\n    const weekday = this.props.day.dt * 1000\r\n    newDate.setTime(weekday)\r\n\r\n    const imgURL = \"owf owf-\" + this.props.day.weather[0].id + \"owf-5x red\"\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"\">\r\n          <div className=\"card\">\r\n\r\n            <h3 className=\"card-title\">{moment(newDate).format('dddd')}</h3>\r\n            <p className=\"text\">{moment(newDate).format('MMMM Do, h:mm a')}</p>\r\n            <i className={imgURL}></i>\r\n            <h1>{Math.round(this.props.day.main.temp)}째F</h1>\r\n            <h5>Feels Like: {Math.round(this.props.day.main.feels_like)}째F</h5>\r\n            <div className=\"card-body\">\r\n              <p className=\"card-text\">{this.props.day.weather[0].description}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default DayCards;","import React from \"react\";\r\nimport \"../../App.css\"\r\n// import DropdownButton from 'react-bootstrap/DropdownButton'\r\n// import Dropdown from 'react-bootstrap/Dropdown'\r\n\r\nclass Form extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"form\">\r\n                <form onSubmit={this.props.getWeather}>\r\n                    <input type=\"text\" name=\"city\" placeholder=\"City\" />\r\n                    {/* <input type=\"text\" name=\"country\" placeholder=\"Country\" /> */}\r\n                        <select className=\"form-control\" id=\"country\">\r\n                            <option>United States</option>\r\n                            <option>Germany</option>\r\n                            <option>Mexico</option>\r\n                            <option>France</option>\r\n                            <option>Spain</option>\r\n                        </select>\r\n                    \r\n                    <button>Get Weather</button>\r\n                </form>\r\n            </div>\r\n        )\r\n\r\n    }\r\n};\r\n\r\nexport default Form","import React from \"react\"\nimport Weather from \"./components/Weather\";\nimport DayCards from \"./components/DayCards\";\nimport Form from \"./components/Form\";\n// import Tide from \"./components/Tide\"\nimport \"./App.css\"\nimport CardDeck from 'react-bootstrap/CardDeck'\nimport Card from 'react-bootstrap/Card'\n\nconst API_KEY = \"c5fc998f4951203abe90d5f6c1f39d7b\";\n\nclass App extends React.Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    feelsLike: undefined,\n    error: undefined,\n    dailyData: []\n  }\n\n  // componentDidMount() {\n  //   navigator.geolocation.getCurrentPosition(function (position) {\n  //     console.log(\"Latitude is :\", position.coords.latitude);\n  //     console.log(\"Longitude is :\", position.coords.longitude);\n  //     console.log(position);\n\n\n  //   });\n  // }\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call = await fetch(`https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/forecast?q=${city},${country}&appid=${API_KEY}&units=imperial`);\n    // const api_call2 = await fetch(`http://api.openweathermap.org/data/2.5/forecast?q=${city},${country}&appid=${API_KEY}&units=imperial`);\n    const data = await api_call.json();\n    const dailyData = data.list.filter(reading => reading.dt_txt.includes(\"18:00:00\"))\n    // const data2 = await api_call2.json();\n    if (city && country) {\n      console.log(this.state);\n      this.setState({\n        temperature: data.list[0].main.temp,\n        city: data.city.name,\n        country: data.city.country,\n        humidity: data.list[0].main.humidity,\n        description: data.list[0].weather[0].description,\n        feelsLike: data.list[0].main.feels_like,\n        icon: data.list[0].weather[0].icon,\n        error: \"\",\n        dailyData: dailyData\n      });\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        feelsLike: undefined,\n        icon: undefined,\n        error: \"Please type a value...\",\n        fullData: undefined,\n        dailyData: undefined\n      });\n    }\n  }\n\n  formatDayCards = () => {\n    return this.state.dailyData.map((day, index) => <DayCards day={day} key={index} />)\n  }\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"title-card\">\n          <div className=\"title\">Weather App</div>\n          <br />\n          <div className=\"sub-title\">Get Your Current & 5 Day Forecast</div>\n        </div>\n        <br />\n        <br />\n        <div className=\"top-form\">\n          {/* <div className=\"top-form\">Type a City and Country</div> */}\n          <div className=\"row\">\n            <div className=\"col-lg-6\">\n          <Form getWeather={this.getWeather} />\n          </div>\n          <br />\n          <br />\n          <div className=\"col-lg-6\">\n          <Card className=\"current-weather-card\">\n            <Weather classname=\"current-weather\"\n              temperature={this.state.temperature}\n              city={this.state.city}\n              country={this.state.country}\n              humidity={this.state.humidity}\n              description={this.state.description}\n              feelsLike={this.state.feelsLike}\n              icon={this.state.icon}\n              error={this.state.error}\n            />\n          </Card>\n          </div>\n          </div>\n        </div>\n        <br />\n        <br />\n        <CardDeck>\n          {this.formatDayCards()}\n        </CardDeck>\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}